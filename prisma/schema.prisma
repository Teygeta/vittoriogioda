generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Post {
  id String @id @default(uuid())

  title   String
  content String? @db.Text

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  published Boolean @default(false)

  authorId       String
  postCategoryId String?

  author   User          @relation(fields: [authorId], references: [id])
  category PostCategory? @relation(fields: [postCategoryId], references: [id])

  @@index([authorId])
  @@index([postCategoryId])
}

model PostCategory {
  id String @id @default(uuid())

  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  Post Post[]
}

model Account {
  id String @id @default(cuid())

  userId String @unique

  type              String
  provider          String
  providerAccountId String

  refresh_token String? @db.Text
  access_token  String? @db.Text
  expires_at    Int?
  token_type    String?
  scope         String?
  id_token      String? @db.Text
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id String @id @default(cuid())

  sessionToken String @unique

  userId String @unique

  expires DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id])
}

enum UserRole {
  ADMIN
  USER
  AUTHOR
  MODERATOR

  // when a user ask for a role, it will be set to PENDING
  PENDING
}

model User {
  id String @id @default(cuid())

  name String?

  banned Boolean?

  email         String?   @unique
  emailVerified DateTime?

  image String?
  role  UserRole?

  createdAt DateTime  @default(now())
  deletedAt DateTime?
  updatedAt DateTime  @default(now()) @updatedAt

  accounts Account[]
  posts    Post[]
  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
